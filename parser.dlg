<<
/* parser.dlg -- DLG Description of scanner
 *
 * Generated from: Practica.g
 *
 * Terence Parr, Will Cohen, and Hank Dietz: 1989-2001
 * Purdue University Electrical Engineering
 * With AHPCRC, University of Minnesota
 * ANTLR Version 1.33MR33
 */

#define ANTLR_VERSION	13333
#include "pcctscfg.h"
#include "pccts_stdio.h"

#include <string>
#include <iostream>
#include <map>
#include <list>
using namespace std;

// struct to store information about tokens
typedef struct {
  string kind; //tipus
  string text; //valor
} Attrib;

// function to fill token information (predeclaration)
void zzcr_attr(Attrib *attr, int type, char *text);

// fields for AST nodes
#define AST_FIELDS string kind; string text;
#include "ast.h"

// macro to create a new AST node (and function predeclaration)
#define zzcr_ast(as,attr,ttype,textt) as=createASTnode(attr,ttype,textt)
AST* createASTnode(Attrib* attr, int ttype, char *textt);
#include "antlr.h"
#include "ast.h"
#include "tokens.h"
#include "dlgdef.h"
LOOKAHEAD

void
#ifdef __USE_PROTOS
zzerraction(void)
#else
zzerraction()
#endif
{
	(*zzerr)("invalid token");
	zzadvance();
	zzskip();
}
>>


%%START

@
	<<
		NLA = 1;
	>>

[a-zA-Z]
	<<
		NLA = ID;
	>>

[0-9]+
	<<
		NLA = NUM;
	>>

\=
	<<
		NLA = ASIG;
	>>

\[
	<<
		NLA = LIST_L;
	>>

\]
	<<
		NLA = LIST_R;
	>>

\<
	<<
		NLA = PAIR_L;
	>>

\>
	<<
		NLA = PAIR_R;
	>>

\(
	<<
		NLA = PAR_L;
	>>

\)
	<<
		NLA = PAR_R;
	>>

NOT
	<<
		NLA = NOT;
	>>

AND
	<<
		NLA = AND;
	>>

OR
	<<
		NLA = OR;
	>>

\*
	<<
		NLA = CONC;
	>>

POP
	<<
		NLA = POP;
	>>

PUSH
	<<
		NLA = PUSH;
	>>

NORMALIZE
	<<
		NLA = NORMALIZE;
	>>

CHECK
	<<
		NLA = CHECK;
	>>

ITH
	<<
		NLA = ITH;
	>>

AMEND
	<<
		NLA = AMEND;
	>>

PLOT
	<<
		NLA = PLOT;
	>>

LOGPLOT
	<<
		NLA = LOGPLOT;
	>>

\WHILE
	<<
		NLA = WHILE;
	>>

ENDWHILE
	<<
		NLA = ENDWHILE;
	>>

\IF
	<<
		NLA = IF;
	>>

ENDIF
	<<
		NLA = ENDIF;
	>>

[\ \n]
	<<
		NLA = SPACE;
    zzskip();  
	>>

%%
